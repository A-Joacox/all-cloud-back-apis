-- MySQL Schema for Rooms API
-- Database: cinema_rooms

CREATE DATABASE IF NOT EXISTS cinema_rooms;
USE cinema_rooms;

-- Tabla de Salas
CREATE TABLE rooms (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(100) NOT NULL,
    capacity INT NOT NULL,
    screen_type ENUM('2D', '3D', 'IMAX') DEFAULT '2D',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Tabla de Asientos
CREATE TABLE seats (
    id INT PRIMARY KEY AUTO_INCREMENT,
    room_id INT NOT NULL,
    row_number VARCHAR(10) NOT NULL,
    seat_number INT NOT NULL,
    seat_type ENUM('regular', 'premium', 'vip') DEFAULT 'regular',
    is_available BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (room_id) REFERENCES rooms(id) ON DELETE CASCADE,
    UNIQUE KEY unique_seat (room_id, row_number, seat_number)
);

-- Tabla de Horarios
CREATE TABLE schedules (
    id INT PRIMARY KEY AUTO_INCREMENT,
    movie_id VARCHAR(100) NOT NULL, -- Referencia a MongoDB
    room_id INT NOT NULL,
    show_time DATETIME NOT NULL,
    price DECIMAL(10,2) NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (room_id) REFERENCES rooms(id) ON DELETE CASCADE
);

-- √çndices para mejorar performance
CREATE INDEX idx_rooms_active ON rooms(is_active);
CREATE INDEX idx_seats_room ON seats(room_id);
CREATE INDEX idx_seats_available ON seats(is_available);
CREATE INDEX idx_schedules_movie ON schedules(movie_id);
CREATE INDEX idx_schedules_room ON schedules(room_id);
CREATE INDEX idx_schedules_time ON schedules(show_time);
CREATE INDEX idx_schedules_active ON schedules(is_active);

-- Datos de ejemplo
INSERT INTO rooms (name, capacity, screen_type) VALUES
('Sala 1', 100, '2D'),
('Sala 2', 80, '3D'),
('Sala 3', 120, 'IMAX'),
('Sala 4', 60, '2D');

-- Generar asientos para las salas
INSERT INTO seats (room_id, row_number, seat_number, seat_type)
SELECT 
    r.id,
    CHAR(65 + FLOOR((s.seat_num - 1) / 10)) as row_number,
    ((s.seat_num - 1) % 10) + 1 as seat_number,
    CASE 
        WHEN ((s.seat_num - 1) % 10) + 1 <= 2 THEN 'vip'
        WHEN ((s.seat_num - 1) % 10) + 1 <= 6 THEN 'premium'
        ELSE 'regular'
    END as seat_type
FROM rooms r
CROSS JOIN (
    SELECT 1 as seat_num UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION
    SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION
    SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION
    SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION SELECT 20 UNION
    SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24 UNION SELECT 25 UNION
    SELECT 26 UNION SELECT 27 UNION SELECT 28 UNION SELECT 29 UNION SELECT 30 UNION
    SELECT 31 UNION SELECT 32 UNION SELECT 33 UNION SELECT 34 UNION SELECT 35 UNION
    SELECT 36 UNION SELECT 37 UNION SELECT 38 UNION SELECT 39 UNION SELECT 40 UNION
    SELECT 41 UNION SELECT 42 UNION SELECT 43 UNION SELECT 44 UNION SELECT 45 UNION
    SELECT 46 UNION SELECT 47 UNION SELECT 48 UNION SELECT 49 UNION SELECT 50 UNION
    SELECT 51 UNION SELECT 52 UNION SELECT 53 UNION SELECT 54 UNION SELECT 55 UNION
    SELECT 56 UNION SELECT 57 UNION SELECT 58 UNION SELECT 59 UNION SELECT 60 UNION
    SELECT 61 UNION SELECT 62 UNION SELECT 63 UNION SELECT 64 UNION SELECT 65 UNION
    SELECT 66 UNION SELECT 67 UNION SELECT 68 UNION SELECT 69 UNION SELECT 70 UNION
    SELECT 71 UNION SELECT 72 UNION SELECT 73 UNION SELECT 74 UNION SELECT 75 UNION
    SELECT 76 UNION SELECT 77 UNION SELECT 78 UNION SELECT 79 UNION SELECT 80 UNION
    SELECT 81 UNION SELECT 82 UNION SELECT 83 UNION SELECT 84 UNION SELECT 85 UNION
    SELECT 86 UNION SELECT 87 UNION SELECT 88 UNION SELECT 89 UNION SELECT 90 UNION
    SELECT 91 UNION SELECT 92 UNION SELECT 93 UNION SELECT 94 UNION SELECT 95 UNION
    SELECT 96 UNION SELECT 97 UNION SELECT 98 UNION SELECT 99 UNION SELECT 100
) s
WHERE s.seat_num <= r.capacity;